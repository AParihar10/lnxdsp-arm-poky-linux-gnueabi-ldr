#!/bin/bash

# Copyright (c) 2014-2021, Analog Devices, Inc.  All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 
# * Neither the name of Analog Devices, Inc.  nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ARM Toolchain Auto-Tester
#This is a simple script to run a chosen toolchain against the standard
#GNU toolchain testsuites.  Some of the code was borrowed from 
#toolchain-regtest from blackfin.uclinux.org.

# Definitions
VALID_TC=" arm-none arm-linux aarch64-none"
VALID_TESTS=" binutils gas gcc g++ ld libstdc++ "
VALID_TESTS_BM="newlib "
VALID_TESTS_LINUX="gdb libmudflap libgomp "
TESTS=" "
SCRIPT_DIR=`dirname $0`
cd $SCRIPT_DIR/..
TD=`pwd`
TESTROOTDIR="${TD}/testresults"
BOARD=qemu
DEFAULT_PARTS="SC589"
SKIPPED_DIR="$TESTROOTDIR/skipped"
TOOL_FLAGS="-D_ADI_TEST_CHANGES -DSTACK_SIZE=0x1000" # STACK_SIZE used by c-torture tests to self-configure
RUNTEST_FLAGS="--tool_opts \"$TOOL_FLAGS\" "

# Functions
help() {
  cat <<-EOF

Usage : armtest {TOOLCHAIN} [OPTIONS] [test] [...]

{TOOLCHAIN}         Which toolchain to test (e.g. arm-none or arm-linux)
-b {BOARD}          On what "board" to test (e.g. sim, qemu, jtag or ssh)
                    Default: qemu
-p {PART}           Which part type to test.
                    Default: `echo ${DEFAULT_PARTS}`
-i {IP}             If we're remote testing (i.e. ssh) we need an IP.
[test]              Valid tests=
                            all: `echo ${VALID_TESTS}`
                       arm-none: `echo ${VALID_TESTS_BM}`
                          linux: `echo ${VALID_TESTS_LINUX}`
                    Default: All valid
EOF
  exit 0
}

echo_date()
{
  # if we can fit the msg on one line, then do it.  else,
  # try and split it on word boundaries.  if all else fails,
  # give it its own line.
  local recurse
  case $1 in
    -[rR]) recurse=$1; shift;;
  esac
  local date="$(date '+%d %b %Y %T')"
  local msg="$*"
  local bytes_for_msg=$((${COLUMNS:-80} - ${#date} - 5))

  if [ -n "${recurse}" ] || [ ${#msg} -le ${bytes_for_msg} ] ; then
    local banner="***" full
    if [ -n "${recurse}" ] ; then
      [ ${#msg} -eq 0 ] && return 1
      [ "${recurse}" = "-r" ] && banner="   " date=""
    fi
    [ ${#msg} -gt ${bytes_for_msg} ] && full=${msg} msg=""
    if [ -n "${msg}" ] || [ "${recurse}" = "-R" ] ; then
      printf "%s %-${bytes_for_msg}s %s\n" "${banner}" "${msg}" "${date}"
    fi
    [ -n "${full}" ] && echo "   " ${full}
  else
    local split word
    recurse="-R"
    for word in ${msg} ; do
      if [ $((${#split} + ${#word})) -ge ${bytes_for_msg} ] ; then
        echo_date ${recurse} ${split} && recurse="-r"
        split=""
      fi
      split="${split} ${word}"
    done
    echo_date ${recurse} ${split}
    recurse=""
  fi
  return 0
}

notice()
{
  local notice="$1"
  shift
  printf "%-24s%s\n" "$notice: " "$*"
}

# does $1 exist in the $2... list ?
has()
{
  local o="$1"; shift
  case " $* " in *" $o "*) return 0;; *) return 1;; esac
}

process_tests() {
  #check valid testsuites
  for test in "$@" ; do
    if ! has ${test} ${VALID_TESTS} ; then
      echo -e "Unknown test: ${test}\nValid tests: " ${VALID_TESTS}
      exit 1
    fi
    TESTS="$TESTS$test "
  done
  if [ "${TESTS}" == " " ] ; then
    TESTS=$VALID_TESTS
  fi
  TESTS=`echo "$TESTS" | sed 's/^ *//g'`
  notice "Testsuites selected" "$TESTS"
}

generate_bfdtest() {
  #binutils testing relies on bfdtest1/2, so let's build them
  TRD=$1
  TSRC=$2
  #libiberty is a prerequisite for libbfd
  mkdir $TRD/tmp/libiberty
  cd $TRD/tmp/libiberty
  $TD/src/$TSRC/../../libiberty/configure > build.log 2>&1
  make >> build.log 2>&1
  #zlib is a prerequisite for libbfd
  mkdir $TRD/tmp/zlib
  cd $TRD/tmp/zlib
  $TD/src/$TSRC/../../zlib/configure > build.log 2>&1
  make >> build.log 2>&1
  #libbfd is a prerequisite for bfdtest1/2
  mkdir $TRD/tmp/bfd
  cd $TRD/tmp/bfd
  $TD/src/$TSRC/../../bfd/configure --enable-install-libbfd  > build.log 2>&1
  make >> build.log 2>&1
  #now build bfdtest, which is in binutils
  mkdir $TRD/tmp/binutils
  cd $TRD/tmp/binutils
  $TD/src/$TSRC/../configure  > build.log 2>&1
  make bfdtest1 >> build.log 2>&1
  make bfdtest2 >> build.log 2>&1
  cp bfdtest1 ../
  cp bfdtest2 ../
}

generate_site_exp() {
  #build up a site.exp in the appropriate directory
  TRD=$1
  pkg=$2
  part=$3
  SITE=$TRD/site.exp
  case $pkg in
    gcc)        TSRC=`ls -1 src/ | grep gcc | tail -n 1`/gcc/testsuite ;;
    g++)        TSRC=`ls -1 src/ | grep gcc | tail -n 1`/gcc/testsuite ;;
    libmudflap) TSRC=`ls -1 src/ | grep gcc | tail -n 1`/$pkg/testsuite
                cp src/`ls -1 src/ | sort -r | grep -m1 gcc-linaro`/libmudflap/testsuite/mfconfig.exp.in $TRD/tmp/mfconfig.exp 
                sed -i -e "s/@LIBS@/-I./g" -e "s/@build_libmudflapth@/1/g" $TRD/tmp/mfconfig.exp
                echo "#define HAVE_SYS_MMAN_H 1" > $TRD/config.h
                echo "#define HAVE_MMAP 1" >> $TRD/config.h;;
    libstdc++)  TSRC=`ls -1 src/ | grep gcc | tail -n 1`/$pkg-v3/testsuite ;;
    libgomp)    TSRC=`ls -1 src/ | grep gcc | tail -n 1`/$pkg/testsuite ;;
    binutils)   TSRC=`ls -1 src/ | grep binutils | tail -n 1`/$pkg/testsuite
				generate_bfdtest $TRD $TSRC ;;
    gas)        TSRC=`ls -1 src/ | grep binutils | tail -n 1`/$pkg/testsuite ;;
    ld)         TSRC=`ls -1 src/ | grep binutils | tail -n 1`/$pkg/testsuite ;;
    gdb)        TSRC=`ls -1 src/ | grep gdb | tail -n 1`/$pkg/testsuite ;;
    newlib)     TSRC=`ls -1 src/ | grep newlib | tail -n 1`/$pkg/testsuite ;;
    *)          echo "Unknown pkg."
                exit 1 ;;
  esac
  echo "set srcdir $TD/src/$TSRC" > $SITE
  host_triplet=`$TD/src/$TSRC/../../config.guess`
  echo "set host_triplet $host_triplet" >> $SITE
  echo "set build_triplet $host_triplet" >> $SITE
  echo "set target_triplet $TRIPLET" >> $SITE
  echo "set target_alias $TRIPLET" >> $SITE
  echo "set tmpdir $TRD/tmp" >> $SITE
  echo "set part ADSP-${part}" >> $SITE
  case $BOARD in
    ssh) echo "set target_list $TARGET-linux" >> $SITE
         echo "set target unix" >> $SITE
         echo "set user_host $IP" >> $SITE
         echo "set user_name $USER" >> $SITE
         echo "set user_pass $PASS" >> $SITE ;;
    jtag) echo "set target_list $TARGET-jtag" >> $SITE
         echo "set user_host $IP" >> $SITE ;;
    qemu) echo "set target_list $TARGET-qemu" >> $SITE
          echo "set SIM \"${QEMU_CMD}\"" >> $SITE ;;
    sim)  echo "set target_list $TARGET-sim" >> $SITE ;;
    *)    echo "Unknown board."
          exit 1 ;;
  esac
  echo "lappend boards_dir \"$TD/scripts/boards\"" >> $SITE
  echo "set experimental 0" >> $SITE
  export DEJAGNU=$SITE
}

identity_mount() {
if [ `uname -s | grep --count -i "CYGWIN"` != 0 ] ; then
  notice "Host Detected" "Cygwin"
  DRIVE=$(cygpath -d $TRD | sed -e "s/^\(.\):.*$/\1/g" | sed -e 's/\(.*\)/\L\1/')
  TAIL=`cygpath -w $TRD | sed -e "s/^.:.//g"  | sed -e 's/\(.*\)/\L\1/'`
  IDN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  echo $IDN > $TRD/uid
  if [ ! -d /cygdrive/$DRIVE/$DRIVE ]; then
    notice "Identity Mount" "Unconfigured"
    echo "No identity mount detected."
    echo "About to create a junction between $DRIVE:\\$DRIVE & $DRIVE:\\"
    echo "Continuing in 5 seconds.  Ctrl-C to abort."
    read -n 1 -s -t 5
    cmd.exe /c mklink /j $DRIVE:\\$DRIVE $DRIVE:\\
  elif [ `cat /cygdrive/$DRIVE/$DRIVE/$TAIL/uid | grep --count "$IDN"` -ne 1 ]; then
    notice "Identity Mount" "ERROR"
    echo "Bad identity mount detected. Expected:\n  /cygdrive/$DRIVE/$DRIVE"
    echo "to point to:\n  $DRIVE:\\"
    echo "\nEither move this directory aside, or rmdir the junction."
    exit -1
  else
    notice "Identity Mount" "Configured"
  fi
else
  notice "Host Detected" "Linux"
fi
}

install_lib() {
  #install lib to target board
  LIBNAME=$1
  #install some target libs
  exists=`ssh -q $USER@$IP "test -e /lib/$LIBNAME && echo 1 || echo 0"`
  if [ $exists -ne 1 ]; then
    notice "Installing target lib" "$LIBNAME"
    LIBSO=`arm-linux-gnueabi-gcc -mproc=ADSP-${part} --print-file-name=$LIBNAME`
    if [ ! -f $LIBSO ]; then
      echo "ERROR: Can't find $LIBNAME."
      exit 1
    fi
    scp $LIBSO $USER@$IP:/lib/
  fi
}

configure_target() {
if [ "${BOARD}" == "ssh" ] ; then
#We're running via SSH, so configure the target board.
  if [ "${IP}" == "" ] ; then
    notice "Please declare an IP address to test over ssh"
    exit 1
  fi
  notice "on IP" "$IP"
  # First let's set up the board.
  ssh -q -o "BatchMode=yes" $USER@$IP exit
  if [ $? -ne 0 ]; then
    # We can't access the board.  Let's try and fix that.
    echo "WARNING: Can't access remote.  Trying to install public key."
    echo "Please enter remote's password when prompted:"
    ssh-copy-id $USER@$IP
    ssh -q -o "BatchMode=yes" $USER@$IP exit
    if [ $? -ne 0 ]; then
      echo "ERROR: Still can't access board.  Please add your ssh public key to"
      echo "the remote board's ~/.ssh/authorized_keys file."
      exit 1
    fi
  fi
  #install gdbserver
  exists=`ssh -q $USER@$IP "test -e /bin/gdbserver && echo 1 || echo 0"`
  if [ $exists -ne 1 ]; then
    GDBS=`which arm-linux-gnueabi-gdbserver`
    if [ `echo $?` -ne 0 ]; then
      notice "Installing gdbserver" "Failed"
      echo "ERROR: Can't find gdbserver in your toolchain."
      exit 1
    fi
    scp $GDBS $USER@$IP:/bin/gdbserver
    notice "Installing gdbserver" "Success"
  fi
  #install some target libs
  install_lib libmudflap.so.0
  install_lib libmudflapth.so.0
  install_lib libgomp.so.1
fi
}

# This function moves all the files referenced in the skiplist of the current 
# tool into a quarantine folder.  The test run will then effectively skip the 
# test cases that they implement.  Original filepaths are preserved in a '.path'
# file alongside each skipped file so they can be restored for the next tool's
# test run.
#
set_skipped() {
  part="$1"
  tool="$2"
  SKIPPED=" "

  if [ "$TARGET" = "arm" ] ; then
    skiplist="$TESTROOTDIR/../scripts/skiplists/$tool.skip"
  else
    skiplist="$TESTROOTDIR/../scripts/skiplists/$tool-aarch64.skip"
  fi

  # if a skiplist file exists for the current tool:
  if [ -f "$skiplist" ] ; then

    # 1. read the names of files to skip from it, but ignore lines begining 
    # with a '#' character
    SKIPPED=$(egrep -v '^#' "$skiplist")

    # 2. check if quarantine directory exists & create it if necessary
    #    (error exit if a file with that name exists rather than a folder)
    if [ $(mkdir -p $SKIPPED_DIR) ] ; then 
      echo "ERROR: can't create 'skipped' directory @ $SKIPPED_DIR" && exit -1
    else 
      echo "created 'skipped' directory @ $SKIPPED_DIR"
    fi

    # 3. move the files to the quarantine folder...
    for file in $SKIPPED ; do
      echo -n "skipping $file..."
      src=$(find ../../.. -path *$file)
      src=$(readlink -f $src)
      dest="$SKIPPED_DIR/$file"
      mkdir --parents $(dirname $dest)
      mv $src $dest && echo " done"

      # ...and save their original paths
      echo $src > $dest.path
    done

  fi
}

# This function moves the files read from the current tool's skiplist and
# previously stored into the quarantine folder back to their original
# location, effectively making them available again for the next toolchain
# component test run.
# This location was saved in the matching '.path' file stored alongside it.
#
restore_skipped() {
  for file in $SKIPPED ; do
    echo -n "restoring $file..."
    src="$SKIPPED_DIR/$file"
    dest=$(cat "$SKIPPED_DIR/$file.path")
    mv $src $dest && echo " done"
  done
}

###################################################################
## Main
#set -x

TC=$1
if ! has ${TC} ${VALID_TC} ; then
  echo -e "Unknown toolchain: ${TC}\nValid toolchains: " ${VALID_TC}
  help
  exit 1
fi
notice "Toolchain selected" "$TC"
if [ "$TC" == "arm-none" ] ; then
  export VALID_TESTS="$VALID_TESTS$VALID_TESTS_BM"
  export VALID_BOARDS=" qemu sim jtag "
  export TRIPLET="arm-none-eabi"
  export QEMU_CMD="qemu-system-arm -semihosting -cpu adsp-sc589 -kernel"
  export TARGET="arm"
elif [ "$TC" == "aarch64-none" ] ; then
  export VALID_TESTS="$VALID_TESTS$VALID_TESTS_BM"
  export VALID_BOARDS=" qemu sim jtag "
  export TRIPLET="aarch64-none-elf"
  export QEMU_CMD="qemu-system-aarch64 -semihosting -kernel"
  export DEFAULT_PARTS="SC598"
  export TARGET="aarch64"
else
  export VALID_TESTS="$VALID_TESTS$VALID_TESTS_LINUX"
  export VALID_BOARDS=" qemu ssh "
  export TRIPLET="arm-linux-gnueabi"
  export QEMU_CMD="qemu-arm"
  export TARGET="arm"
fi

shift 1

while getopts b:p:i:h parameter
do
  case $parameter in
    b)  BOARD=$OPTARG ;;
    p)  PART=$OPTARG ;;
    i)  IP=$OPTARG
        USER=root
        PASS=root
        if [ `echo $IP | grep --count "@"` -ne 0 ]; then
          USER=`echo $IP | sed -e "s/^\(.*\)@.*$/\1/"`
          IP=`echo $IP | sed -e "s/^.*@\(.*\)$/\1/"`
        fi
        ;;
    h)  help ;;
    *)  echo "Unknown option."
        exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

#Configure for board
if ! has ${BOARD} ${VALID_BOARDS} ; then
  echo -e "Illegal board type: ${BOARD}\nValid boards: " ${VALID_BOARDS}
  exit 1
fi
notice "Testing via" "$BOARD"

#Ensure the tests are appropriate
process_tests $@

if [ "${PARTS}" == "" ] ; then
  export PARTS=$DEFAULT_PARTS
fi
notice "Parts to test" "$PARTS"

echo
echo_date "Starting Testing"

#loop through the part(s)
for part in $PARTS ; do
  echo
  #Configure for part
  export TRD="$TESTROOTDIR/$TC-$BOARD-$part"
  export CXXFLAGS="-D_ADI_TEST_CHANGES" # Necessary for libstc++ (g++) tests
  mkdir -p $TRD
  mkdir -p $TRD/tmp
  identity_mount
  configure_target
  rm -rf $TRD/tmp/*
  notice "Testing Part" "$part"
  notice "Test Output" "$TRD"

  for test in $TESTS ; do
    echo
    echo_date "Testing $test"
    export TEST_ALWAYS_FLAGS="-D_ADI_TEST_CHANGES -DSTACK_SIZE=0x1000"
    generate_site_exp $TRD $test $part
    cd $TRD/tmp
    set_skipped $part $test
    echo "--------------------------------------------------"
    set -x
    eval "runtest --tool $test --xml=${test}.xml $RUNTEST_FLAGS > $test.output 2>&1"
    { set +x; } 2>/dev/null
    echo "--------------------------------------------------"
    restore_skipped
    mv $TRD/site.exp $TRD/site.$test
    cp $TRD/tmp/*.log $TRD/
    cp $TRD/tmp/*.xml $TRD/
    cp $TRD/tmp/*.sum $TRD/
    cd $TD
  done
done
echo

# cleanup quarantine folder
rm -rf $SKIPPED_DIR && echo $"deleted 'skipped' directory @ $SKIPPED_DIR"

echo_date "Finished Testing"
